INTEGRATING WHATSAPP 
Step 1: Add the WhatsApp Icon HTML and CSS
First, you'll need to add the HTML for the WhatsApp icon and the CSS to style it. You can place this code in your base template so that it appears on every page.

HTML (base.html)

<a href="https://wa.me/yourphonenumber" class="whatsapp_widget" target="_blank">
    <div class="whatsapp_content">
        <i class="fab fa-whatsapp whatsapp-icon"></i>
        <div class="whatsapp-text-container">
            <span class="whatsapp-title">Chat with us</span>
            <span class="whatsapp-subtitle">We are just a click away</span>
        </div>
    </div>
</a>

Replace yourphonenumber with your actual phone number in the international format (e.g., 1234567890).

step 2: CSS (styles.css)
Add the following CSS to your static CSS file to style the WhatsApp icon:

.whatsapp_widget {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: #25D366;
    color: white;
    border-radius: 50px;
    padding: 10px 20px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    text-decoration: none;
    transition: background-color 0.3s;
    z-index: 1000; /* Ensure it is above other elements */
}

.whatsapp_widget:hover {
    background-color: #128C7E;
}

.whatsapp_content {
    display: flex;
    align-items: center;
}

.whatsapp-icon {
    font-size: 24px;
    margin-right: 10px;
}

.whatsapp-text-container {
    display: flex;
    flex-direction: column;
}

.whatsapp-title {
    font-weight: bold;
    font-size: 16px;
}

.whatsapp-subtitle {
    font-size: 12px;
}


Open your settings.py file in your Django project.

Add or update the STATIC_ROOT setting to specify a directory where your static files will be collected. For example:

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
This sets STATIC_ROOT to a directory named staticfiles in your project's base directory.

Ensure STATIC_URL is set correctly. This should already be in your settings.py, but make sure it's there and correct:

STATIC_URL = '/static/'
Create the directory if it doesn't exist. Django should create it for you, but if it doesn't, you can create it manually.

Run the collectstatic command again:

python manage.py collectstatic



Here's a complete example of the relevant settings in settings.py:

import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Other settings...

STATIC_URL = '/static/'

# Add this line
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
After making these changes, running collectstatic should work without errors, and all your static files will be collected into the staticfiles directory.

-----------------------------------------------------------

INTEGRATING PAYSTACK
Integrating Paystack into a Django website involves several steps, including setting up Paystack, creating views and templates for the payment process, and handling the webhook to update payment status automatically.

Step-by-Step Guide:
Install the Requests Library (if you haven't already):

sh
Copy code
pip install requests
Configure Paystack Settings in settings.py:

python
Copy code
# settings.py

PAYSTACK_SECRET_KEY = 'your_paystack_secret_key'
PAYSTACK_PUBLIC_KEY = 'your_paystack_public_key'
Create a Paystack Utility File:
This will handle Paystack-related functions.

python
Copy code
# utils/paystack.py

import requests
from django.conf import settings

class Paystack:
    PAYSTACK_SECRET_KEY = settings.PAYSTACK_SECRET_KEY
    base_url = 'https://api.paystack.co'

    def verify_payment(self, ref, *args, **kwargs):
        path = f'/transaction/verify/{ref}'
        headers = {
            "Authorization": f"Bearer {self.PAYSTACK_SECRET_KEY}",
            "Content-Type": "application/json",
        }
        url = self.base_url + path
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            response_data = response.json()
            return response_data['status'], response_data['data']
        response_data = response.json()
        return response_data['status'], response_data['message']
Create Views and URLs:

python
Copy code
# views.py

from django.shortcuts import render, redirect
from django.conf import settings
from django.http import JsonResponse
from .models import Payment
from .utils.paystack import Paystack

def initiate_payment(request):
    if request.method == 'POST':
        amount = int(request.POST['amount']) * 100  # Amount in kobo
        email = request.POST['email']

        # Create a new payment record
        payment = Payment.objects.create(email=email, amount=amount)
        payment.save()

        context = {
            'payment': payment,
            'paystack_public_key': settings.PAYSTACK_PUBLIC_KEY,
        }
        return render(request, 'payments/make_payment.html', context)
    return render(request, 'payments/initiate_payment.html')

def verify_payment(request, ref):
    paystack = Paystack()
    status, result = paystack.verify_payment(ref)
    if status:
        payment = Payment.objects.get(ref=ref)
        if result['amount'] == payment.amount:
            payment.verified = True
            payment.save()
            return JsonResponse({'message': 'Payment verified successfully'})
    return JsonResponse({'message': 'Payment verification failed'}, status=400)
python
Copy code
# urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('initiate-payment/', views.initiate_payment, name='initiate_payment'),
    path('verify-payment/<str:ref>/', views.verify_payment, name='verify_payment'),
]
Create Templates:

initiate_payment.html:

html
Copy code
<form method="POST">
    {% csrf_token %}
    <input type="email" name="email" placeholder="Enter your email" required>
    <input type="number" name="amount" placeholder="Enter amount" required>
    <button type="submit">Pay</button>
</form>
make_payment.html:

html
Copy code
<script src="https://js.paystack.co/v1/inline.js"></script>
<button type="button" onclick="payWithPaystack()"> Pay </button>
<script>
    function payWithPaystack() {
        var handler = PaystackPop.setup({
            key: '{{ paystack_public_key }}',
            email: '{{ payment.email }}',
            amount: {{ payment.amount }},
            ref: '{{ payment.ref }}',
            onClose: function(){
                alert('Window closed.');
            },
            callback: function(response){
                var reference = response.reference;
                window.location.href = "{% url 'verify_payment' payment.ref %}";
            }
        });
        handler.openIframe();
    }
</script>
Create Payment Model:

python
Copy code
# models.py

from django.db import models
import uuid

class Payment(models.Model):
    ref = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    email = models.EmailField()
    amount = models.IntegerField()
    verified = models.BooleanField(default=False)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.ref)
Run Migrations:

sh
Copy code
python manage.py makemigrations
python manage.py migrate
Handle Webhooks for Automatic Updates:
To update payment status automatically, you need to set up a webhook endpoint. This endpoint will receive notifications from Paystack whenever a payment status changes.

Create Webhook View:

python
Copy code
# views.py

from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import json

@csrf_exempt
def paystack_webhook(request):
    if request.method == 'POST':
        event = json.loads(request.body)
        if event['event'] == 'charge.success':
            ref = event['data']['reference']
            payment = Payment.objects.get(ref=ref)
            payment.verified = True
            payment.save()
            return HttpResponse(status=200)
    return HttpResponse(status=400)
Add Webhook URL:

python
Copy code
# urls.py

urlpatterns += [
    path('paystack-webhook/', views.paystack_webhook, name='paystack_webhook'),
]
Configure Webhook in Paystack Dashboard:

Go to your Paystack dashboard.
Navigate to Settings > API Keys & Webhooks.
Add the webhook URL: https://yourdomain.com/paystack-webhook/.
By following these steps, you will have a fully integrated Paystack payment solution in your Django website, with automatic updates to payment status via webhooks.





Configure Webhook in Paystack Dashboard:

Go to your Paystack dashboard.
Navigate to Settings > API Keys & Webhooks.
Add the webhook URL: https://yourdomain.com/paystack-webhook/.

How do i do this?
ChatGPT
To configure the webhook in your Paystack dashboard, follow these steps:

Log in to your Paystack Dashboard:
Go to the Paystack login page and log in with your credentials.

Navigate to Settings:
Once logged in, find the "Settings" option in the sidebar menu. Click on it.

Go to API Keys & Webhooks:
In the Settings menu, locate and click on "API Keys & Webhooks."

Add the Webhook URL:

Scroll down to the "Webhooks" section.
Enter your webhook URL in the input field. For example, if your Django application is hosted at https://yourdomain.com, your webhook URL will be https://yourdomain.com/paystack-webhook/.
Click the "Add Webhook URL" button to save it.
Save Changes:
After adding the webhook URL, make sure to save any changes if prompted.

Visual Guide
Log in to Paystack Dashboard:
 (Replace with actual image URL if needed)

Navigate to Settings:
 (Replace with actual image URL if needed)

API Keys & Webhooks:
 (Replace with actual image URL if needed)

Add Webhook URL:
 (Replace with actual image URL if needed)

By following these steps, you should be able to successfully configure the webhook in your Paystack dashboard. Once configured, Paystack will send notifications to your specified webhook URL whenever a payment event occurs, allowing your Django application to update payment statuses automatically